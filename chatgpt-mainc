// main.c

#include <stdio.h>
#include "nvs_flash.h"
#include "esp_bt.h"
#include "esp_bt_main.h"
#include "esp_hidd_api.h"
#include "esp_gap_ble_api.h"
#include "esp_log.h"
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/timers.h"
#include "freertos/queue.h"

#define TAG "MEDIA_REMOTE"

#define GPIO_INPUT_PIN      GPIO_NUM_0   // Define your GPIO input pin
#define LED_GPIO            GPIO_NUM_2   // Define your LED GPIO pin

#define HID_CONSUMER_NEXT_TRACK   0xB5
#define HID_CONSUMER_PREV_TRACK   0xB6

#define BUTTON_DEBOUNCE_MS   20
#define BUTTON_LONG_PRESS_MS 200

typedef struct {
    int pinID;
    int debounce_ms;
    int long_press_ms;
    TickType_t lastTicks;
    TickType_t longPressTicks;
    TimerHandle_t DebounceTimer;
} button_t;

static QueueHandle_t gpio_evt_queue = NULL;
static esp_hidd_dev_t *hid_dev = NULL;

// HID Report Map for Consumer Control (Next/Previous Track)
static uint8_t hidReportMap[] = {
    0x05, 0x0C,      // Usage Page (Consumer Devices)
    0x09, 0x01,      // Usage (Consumer Control)
    0xA1, 0x01,      // Collection (Application)
    0x85, 0x01,      //   Report ID (1)
    0x15, 0x00,      //   Logical Minimum (0)
    0x25, 0x01,      //   Logical Maximum (1)
    0x09, 0xB5,      //   Usage (Scan Next Track)
    0x09, 0xB6,      //   Usage (Scan Previous Track)
    0x75, 0x01,      //   Report Size (1)
    0x95, 0x02,      //   Report Count (2)
    0x81, 0x06,      //   Input (Data, Variable, Relative)
    0x95, 0x06,      //   Report Count (6)
    0x81, 0x03,      //   Input (Constant)
    0xC0             // End Collection
};

static esp_ble_adv_data_t adv_data = {
    .set_scan_rsp = false,
    .include_name = true,
    .appearance = 0x03C0,
    .manufacturer_len = 0,
    .p_manufacturer_data = NULL,
    .service_data_len = 0,
    .p_service_data = NULL,
    .service_uuid_len = 0,
    .p_service_uuid = NULL,
    .flag = (ESP_BLE_ADV_FLAG_GEN_DISC | ESP_BLE_ADV_FLAG_BREDR_NOT_SPT),
};

static esp_ble_adv_params_t adv_params = {
    .adv_int_min        = 0x20,
    .adv_int_max        = 0x40,
    .adv_type           = ADV_TYPE_IND,
    .own_addr_type      = BLE_ADDR_TYPE_PUBLIC,
    .channel_map        = ADV_CHNL_ALL,
    .adv_filter_policy  = ADV_FILTER_ALLOW_SCAN_ANY_CON_ANY,
};

static void gap_event_handler(esp_gap_ble_cb_event_t event, esp_ble_gap_cb_param_t *param) {
    // Empty handler: Required by ESP-IDF BLE stack
}

static void hidd_event_callback(esp_hidd_cb_event_t event, esp_hidd_cb_param_t *param) {
    switch (event) {
        case ESP_HIDD_EVENT_REG_FINISH:
            if (param->init_finish.state == ESP_HIDD_INIT_OK) {
                esp_ble_gap_set_device_name("ESP32 Media Remote");
                esp_ble_gap_config_adv_data(&adv_data);
            }
            break;
        case ESP_BLE_GAP_CONFIG_ADV_DATA_COMPLETE_EVT:
            esp_ble_gap_start_advertising(&adv_params);
            break;
        case ESP_HIDD_EVENT_BLE_CONNECT:
            ESP_LOGI(TAG, "Device connected");
            break;
        case ESP_HIDD_EVENT_BLE_DISCONNECT:
            ESP_LOGI(TAG, "Device disconnected");
            esp_ble_gap_start_advertising(&adv_params);
            break;
        default:
            break;
    }
}

// Function prototypes
void setupGPIO(void *args);
static void gpioTask(void *args);
static void debounceTimerCallback(TimerHandle_t xTimer);
static void IRAM_ATTR gpio_isr_handler(void* arg);

void app_main(void) {
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to initialize NVS");
    }

    // Release BT memory (Classic BT not used)
    esp_bt_controller_mem_release(ESP_BT_MODE_CLASSIC_BT);

    // Initialize the BT controller
    esp_bt_controller_config_t bt_cfg = BT_CONTROLLER_INIT_CONFIG_DEFAULT();
    ret = esp_bt_controller_init(&bt_cfg);
    if (ret) {
        ESP_LOGE(TAG, "Bluetooth controller initialize failed: %s", esp_err_to_name(ret));
        return;
    }

    // Enable BT controller in BLE mode
    ret = esp_bt_controller_enable(ESP_BT_MODE_BLE);
    if (ret) {
        ESP_LOGE(TAG, "Bluetooth controller enable failed: %s", esp_err_to_name(ret));
        return;
    }

    // Initialize Bluedroid library
    ret = esp_bluedroid_init();
    if (ret) {
        ESP_LOGE(TAG, "Bluedroid initialize failed: %s", esp_err_to_name(ret));
        return;
    }

    ret = esp_bluedroid_enable();
    if (ret) {
        ESP_LOGE(TAG, "Bluedroid enable failed: %s", esp_err_to_name(ret));
        return;
    }

    // Register GAP callback
    esp_ble_gap_register_callback(gap_event_handler);

    // Initialize HID device
    esp_hidd_profile_init();
    esp_hidd_dev_init(hidReportMap, sizeof(hidReportMap), &hidd_event_callback, &hid_dev);

    // Initialize button structure and GPIO
    button_t button;
    button.pinID = GPIO_INPUT_PIN;
    button.debounce_ms = BUTTON_DEBOUNCE_MS;
    button.long_press_ms = BUTTON_LONG_PRESS_MS;
    button.longPressTicks = pdMS_TO_TICKS(button.long_press_ms);
    setupGPIO(&button);

    // Main task does nothing; all work is done in callbacks and tasks
    while (1) {
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}

// GPIO setup function
void setupGPIO(void *args) {
    button_t *B = (button_t *)args;
    B->lastTicks = xTaskGetTickCount();

    B->DebounceTimer = xTimerCreate(
        "debounce",
        pdMS_TO_TICKS(B->debounce_ms),
        pdFALSE,
        (void *)B,
        debounceTimerCallback
    );

    gpio_evt_queue = xQueueCreate(10, sizeof(uint32_t));
    if (gpio_evt_queue == NULL) {
        ESP_LOGE(TAG, "Failed to create GPIO event queue");
    }

    // Configure GPIO
    gpio_config_t io_conf = {};
    io_conf.intr_type = GPIO_INTR_ANYEDGE;
    io_conf.pin_bit_mask = (1ULL << B->pinID);
    io_conf.mode = GPIO_MODE_INPUT;
    io_conf.pull_up_en = 1;
    io_conf.pull_down_en = 0;
    gpio_config(&io_conf);

    // Create GPIO task
    if (xTaskCreate(gpioTask, "gpioTask", 2048, B, 10, NULL) != pdPASS) {
        ESP_LOGE(TAG, "Failed to create GPIO task");
    }

    // Install GPIO ISR service
    if (gpio_install_isr_service(ESP_INTR_FLAG_DEFAULT) != ESP_OK) {
        ESP_LOGE(TAG, "Failed to install GPIO ISR service");
    }

    // Add ISR handler
    if (gpio_isr_handler_add(B->pinID, gpio_isr_handler, (void *)B->pinID) != ESP_OK) {
        ESP_LOGE(TAG, "Failed to add GPIO ISR handler");
    }

    // LED setup (optional)
    gpio_reset_pin(LED_GPIO);
    gpio_set_direction(LED_GPIO, GPIO_MODE_OUTPUT);
}

// ISR handler for GPIO
static void IRAM_ATTR gpio_isr_handler(void* arg) {
    uint32_t gpio_num = (uint32_t)arg;
    xQueueSendFromISR(gpio_evt_queue, &gpio_num, NULL);
}

// Debounce timer callback
static void debounceTimerCallback(TimerHandle_t xTimer) {
    button_t *B = (button_t *)pvTimerGetTimerID(xTimer);
    int level = gpio_get_level(B->pinID);
    TickType_t nowTicks = xTaskGetTickCount();

    if (level == 0) {
        // Button pressed
        if ((nowTicks - B->lastTicks) > B->longPressTicks) {
            ESP_LOGI(TAG, "Long Press Detected");
            gpio_set_level(LED_GPIO, 1);  // Turn on LED (optional)

            // Send "Previous Track" command
            uint8_t report[2] = {0};
            report[0] = 0x02;  // Previous Track pressed
            esp_hidd_dev_input_set(hid_dev, 0x01, report, sizeof(report));
            vTaskDelay(pdMS_TO_TICKS(100));
            report[0] = 0x00;  // Release
            esp_hidd_dev_input_set(hid_dev, 0x01, report, sizeof(report));
        } else {
            ESP_LOGI(TAG, "Short Press Detected");
            gpio_set_level(LED_GPIO, 0);  // Turn off LED (optional)

            // Send "Next Track" command
            uint8_t report[2] = {0};
            report[0] = 0x01;  // Next Track pressed
            esp_hidd_dev_input_set(hid_dev, 0x01, report, sizeof(report));
            vTaskDelay(pdMS_TO_TICKS(100));
            report[0] = 0x00;  // Release
            esp_hidd_dev_input_set(hid_dev, 0x01, report, sizeof(report));
        }
    }
    B->lastTicks = nowTicks;

    // Re-enable ISR handler
    gpio_isr_handler_add(B->pinID, gpio_isr_handler, (void *)B->pinID);
}

// GPIO task to handle button events
static void gpioTask(void *args) {
    button_t *B = (button_t *)args;
    uint32_t io_num;
    for (;;) {
        if (xQueueReceive(gpio_evt_queue, &io_num, portMAX_DELAY)) {
            // Remove ISR handler to prevent re-entry
            gpio_isr_handler_remove(B->pinID);
            // Start debounce timer
            xTimerStart(B->DebounceTimer, 0);
        }
    }
}
